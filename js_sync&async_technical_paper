## JavaScript Basics

### Data Types in JavaScript

JavaScript has primitives: `undefined`, `null`, `boolean`, `number`, `bigint`, `string`, `symbol`. Non-primitives: `object`.

Example:  
```js
let num = 42; // number
let obj = { key: 'value' }; // object
console.log(typeof num); // "number"
```

### Variable Declarations: let, var, const

- `var`: Function-scoped, hoisted.  
- `let`: Block-scoped, TDZ.  
- `const`: Block-scoped, immutable binding.

Example:  
```js
var x = 1; // global/function scope
let y = 2; // block scope
const z = 3; // cannot reassign
```

### Why Avoid Using var

`var` causes scope leaks and hoisting issues.

Example:  
```js
if (true) { var a = 1; }
console.log(a); // 1 (leaks out)
```

With `let`:  
```js
if (true) { let b = 1; }
console.log(b); // ReferenceError
```

### Dangers of Global Variables

They pollute namespace and risk collisions.

Example:  
```js
globalVar = 'oops'; // implicit global
// Later: library might overwrite it
```

### Truthy and Falsy Values

Falsy: `false`, `0`, `""`, `null`, `undefined`, `NaN`. Others truthy.

Example:  
```js
if (0) { console.log('truthy'); } // falsy, skips
if ('hello') { console.log('truthy'); } // logs
```

### Function Hoisting

Declarations hoisted; expressions not.

Example:  
```js
hoisted(); // Works
function hoisted() { console.log('Hoisted'); }
```

Not hoisted:  
```js
notHoisted(); // TypeError
const notHoisted = () => console.log('Not');
```

### Functions Without Return Statements

Return `undefined`.

Example:  
```js
function noReturn() { }
console.log(noReturn()); // undefined
```

### Ways to Declare Functions

- Declaration: `function name() {}`  
- Expression: `const name = function() {};`  
- Arrow: `const name = () => {};`

Example:  
```js
function decl() { return 'decl'; }
const expr = function() { return 'expr'; };
const arrow = () => 'arrow';
```

### Pass by Value vs. Pass by Reference

Primitives: value. Objects: reference.

Example:  
```js
let prim = 1;
function changePrim(p) { p = 2; }
changePrim(prim); console.log(prim); // 1

let obj = { val: 1 };
function changeObj(o) { o.val = 2; }
changeObj(obj); console.log(obj.val); // 2
```

### Types of For Loops

- Numeric `for`: Index-based.  
- `for...in`: Keys.  
- `for...of`: Values.  
- `forEach`: Callback per item.

Example:  
```js
for (let i = 0; i < 3; i++) { console.log(i); } // 0 1 2
let obj = {a:1, b:2};
for (let key in obj) { console.log(key); } // a b
let arr = [1,2];
for (let val of arr) { console.log(val); } // 1 2
arr.forEach(v => console.log(v)); // 1 2
```

### Popular Array Utility Methods

`push`, `pop`, `slice`, `concat`, `indexOf`, `includes`.

Example:  
```js
let arr = [1,2];
arr.push(3); // [1,2,3]
console.log(arr.slice(1)); // [2,3]
```

### Popular String Utility Methods

`slice`, `split`, `replace`, `toUpperCase`, `trim`.

Example:  
```js
let str = ' hello ';
console.log(str.trim().toUpperCase()); // "HELLO"
console.log(str.split(' ')); // ['', 'hello', '']
```

### Popular Object Utility Methods

`Object.keys`, `Object.assign`, `Object.freeze`.

Example:  
```js
let obj = {a:1, b:2};
console.log(Object.keys(obj)); // ['a','b']
let copy = Object.assign({}, obj);
```

### When to Use forEach vs. Map/Filter/Reduce

`forEach`: Mutate/log. `map`: Transform. `filter`: Select. `reduce`: Accumulate.

Example:  
```js
let arr = [1,2,3];
arr.forEach(x => console.log(x)); // logs each
let doubled = arr.map(x => x*2); // [2,4,6]
let evens = arr.filter(x => x%2===0); // [2]
let sum = arr.reduce((acc, x) => acc + x, 0); // 6
```

### Immutable vs. Mutable Methods

Mutable: Change original. Immutable: New copy.

Example:  
```js
let arr = [1,2];
arr.push(3); // mutable, arr = [1,2,3]
let sliced = arr.slice(0,1); // immutable, [1]
```

### Error Handling with Try-Catch

Catch sync errors.

Example:  
```js
try {
  undefinedVar;
} catch (e) {
  console.error(e.message); // "undefinedVar is not defined"
}
```

### Throwing Errors

Custom errors.

Example:  
```js
throw new Error('Oops'); // Error object
throw 'Oops'; // String
```

### Difference: throw new Error vs. throw String

Error has stack; string doesn't.

Example: Stack trace in dev tools for `new Error`.

### Reading Error Messages and Stack Traces

Message/type/stack. Practice: Daily bugs like `null.prop` for 2 weeks.

Example: Error: "Cannot read properties of null" â€“ trace to line.

### Importance of Catch Block

Graceful handling.

Example: Without catch, script stops; with, continues.

### Spread Operator

Copy/merge.

Example:  
```js
let arr = [1,2];
let copy = [...arr]; // [1,2]
let merged = {...{a:1}, b:2}; // {a:1, b:2}
```

### Template Literals

Interpolation.

Example:  
```js
let name = 'World';
console.log(`Hello ${name}`); // "Hello World"
```

### Default Parameters

Fallbacks.

Example:  
```js
function greet(name = 'Guest') { return `Hi ${name}`; }
greet(); // "Hi Guest"
```

### Destructuring

Extract.

Example:  
```js
let obj = {a:1, b:2};
let {a, b} = obj; // a=1, b=2
let [x,y] = [3,4]; // x=3, y=4
```

### Closures

Retain scope.

Example:  
```js
function outer() {
  let count = 0;
  return () => count++;
}
let inc = outer();
inc(); // 0
inc(); // 1
```

### Arrow vs. Regular Functions

Arrow: Lexical `this`.

Example:  
```js
const obj = { val:1, reg: function() { return this.val; }, arrow: () => this.val };
obj.reg(); // 1
obj.arrow(); // undefined (window this)
```

### === vs. ==

Strict vs. loose.

Example:  
```js
1 == '1'; // true
1 === '1'; // false
```

### value === undefined vs. !value

Specific vs. falsy.

Example:  
```js
let v = 0;
!v; // true (falsy)
v === undefined; // false
```

### Array Method Chaining

Pipeline.

Example:  
```js
[1,2,3].filter(x => x>1).map(x => x*2); // [4,6]
```

### null vs. undefined

Intentional vs. absent.

Example:  
```js
let u; // undefined
let n = null; // null
```

### Importing/Exporting Modules (CommonJS)

Share code.

Example (module.js):  
```js
module.exports = { foo: 'bar' };
```
(main.js):  
```js
const { foo } = require('./module');
```

### Console Methods

Logging variants.

Example:  
```js
console.log('Info');
console.error('Error');
console.warn('Warn');
console.table([{a:1}]);
```

### Best Practices from LMS

Indent 2-4 spaces; camelCase; descriptive names.

Example:  
```js
for (let index = 0; index < array.length; index++) { // descriptive
  const element = array[index];
}
```

### Passing Functions to Other Functions

Callbacks.

Example:  
```js
function higher(cb) { cb(); }
higher(() => console.log('Called'));
```

### Named vs. Anonymous Functions

Named for traces.

Example:  
```js
const named = function namedFn() {}; // name = 'namedFn'
const anon = function() {}; // name = ''
```

### Variable Number of Arguments

Rest/`arguments`.

Example:  
```js
function sum(...nums) { return nums.reduce((a,b)=>a+b,0); }
sum(1,2,3); // 6
```

## Asynchronous JavaScript

### How JS Executes Code

Single-threaded, sync line-by-line; async via loop.

Example: Sync blocks; `setTimeout` doesn't.

### Sync vs. Async

Blocking vs. non-blocking.

Example: Sync `while(true)` hangs; async `setTimeout` continues.

### Ways to Make Code Async

Timers, events, fetch.

Example:  
```js
setTimeout(() => console.log('Async'), 1000);
```

### Web Browser APIs

Offload async: DOM, fetch.

Example: `fetch('url').then(...)`.

### Event Loop

Stack empty? Process tasks.

Example: Sync code first, then timeouts.

### Callback Hell

Nested mess.

Example:  
```js
fs.readFile('1', (err,data) => {
  fs.readFile('2', (err,data) => { /* deep */ });
});
```

### Inversion of Control in Callbacks

Trust issues.

Example: Callback called twice unexpectedly.

## Promises

### What is a Promise?

Async result holder.

Example: `fetch` returns Promise.

### Creating a Promise

Resolver/rejector.

Example:  
```js
new Promise((res, rej) => setTimeout(() => res('Done'), 1000));
```

### Promise States

Pending, fulfilled, rejected.

Example: Starts pending; `resolve` fulfills.

### Consuming a Promise

`.then`/`.catch`.

Example:  
```js
promise.then(res => console.log(res));
```

## Promise Chaining

### Chaining with .then

Sequential.

Example:  
```js
promise.then(res => res + 1).then(console.log);
```

### Handling Errors with .catch

Catch rejects.

Example:  
```js
promise.then(...).catch(err => console.error(err));
```

### Finally Block

Always run.

Example:  
```js
promise.then(...).finally(() => console.log('Cleanup'));
```

### Error in .then with .catch

Caught downstream.

Example: Throw in .then -> .catch handles.

### Error in .then without .catch

Unhandled.

Example: Browser warns.

### Why .catch at End

Catches all.

Example: Multiple .then; one .catch.

### Consuming Multiple Promises

Chain or all.

Example:  
```js
Promise.all([p1, p2]).then(results => ...);
```

### Error Handling with Promises

.catch essential.

Example: Without, silent fail.

### Why Error Handling is Crucial

Reliability.

Example: Uncaught reject crashes node.

### Promisify Async Callbacks

Wrap.

Example:  
```js
function delay(ms) {
  return new Promise(res => setTimeout(res, ms));
}
```

### Promise Utility Functions

- `Promise.resolve`: Instant fulfill.  
Example: `Promise.resolve(42).then(console.log);`  
- `Promise.reject`: Instant reject.  
Example: `Promise.reject('Err').catch(console.error);`  
- `Promise.all`: All or nothing.  
Example: `Promise.all([p1,p2]).then(([r1,r2]) => ...);`  
- `Promise.allSettled`: All results.  
Example: Returns array of {status, value/reason}.  
- `Promise.any`: First success.  
Example: `Promise.any([p1,p2]).then(first => ...);`  
- `Promise.race`: First settle.  
Example: `Promise.race([p1,p2]).then/w.catch`.
